package com.improvementsolutions.controller;

import com.improvementsolutions.model.*;
import com.improvementsolutions.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/master-data") // Prefijo /api/ para consistencia
@RequiredArgsConstructor
public class MasterDataController {

    private final GenderRepository genderRepository;
    private final EducationLevelRepository educationLevelRepository;
    private final MaritalStatusRepository maritalStatusRepository;
    private final ResidenceTypeRepository residenceTypeRepository;
    private final EthnicGroupRepository ethnicGroupRepository;
    private final DocumentTypeRepository documentTypeRepository;
    private final DepartmentRepository departmentRepository;
    private final PositionRepository positionRepository;
    private final IessRepository iessRepository;

    // Gender
    @GetMapping("/genders")
    public ResponseEntity<List<Gender>> getAllGenders() {
        return ResponseEntity.ok(genderRepository.findAll());
    }

    @GetMapping("/genders/{id}")
    public ResponseEntity<Gender> getGenderById(@PathVariable Long id) {
        return genderRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/genders")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Gender> createGender(@RequestBody Gender gender) {
        if (genderRepository.findByName(gender.getName()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        gender.setCreatedAt(LocalDateTime.now());
        gender.setUpdatedAt(LocalDateTime.now());
        return ResponseEntity.status(HttpStatus.CREATED).body(genderRepository.save(gender));
    }

    @PutMapping("/genders/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Gender> updateGender(@PathVariable Long id, @RequestBody Gender gender) {
        return genderRepository.findById(id)
                .map(existingGender -> {
                    // Verificar si el nombre ya existe en otro registro
                    Optional<Gender> genderWithSameName = genderRepository.findByName(gender.getName());
                    if (genderWithSameName.isPresent() && !genderWithSameName.get().getId().equals(id)) {
                        return ResponseEntity.status(HttpStatus.CONFLICT).build();
                    }
                    
                    existingGender.setName(gender.getName());
                    existingGender.setDescription(gender.getDescription());
                    existingGender.setUpdatedAt(LocalDateTime.now());
                    return ResponseEntity.ok(genderRepository.save(existingGender));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/genders/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteGender(@PathVariable Long id) {
        if (!genderRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        genderRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }

    // Education Level
    @GetMapping("/education-levels")
    public ResponseEntity<List<EducationLevel>> getAllEducationLevels() {
        return ResponseEntity.ok(educationLevelRepository.findAll());
    }

    @GetMapping("/education-levels/{id}")
    public ResponseEntity<EducationLevel> getEducationLevelById(@PathVariable Long id) {
        return educationLevelRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/education-levels")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<EducationLevel> createEducationLevel(@RequestBody EducationLevel educationLevel) {
        if (educationLevelRepository.findByName(educationLevel.getName()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        educationLevel.setCreatedAt(LocalDateTime.now());
        educationLevel.setUpdatedAt(LocalDateTime.now());
        return ResponseEntity.status(HttpStatus.CREATED).body(educationLevelRepository.save(educationLevel));
    }

    @PutMapping("/education-levels/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<EducationLevel> updateEducationLevel(@PathVariable Long id, @RequestBody EducationLevel educationLevel) {
        return educationLevelRepository.findById(id)
                .map(existingEducationLevel -> {
                    // Verificar si el nombre ya existe en otro registro
                    Optional<EducationLevel> educationLevelWithSameName = educationLevelRepository.findByName(educationLevel.getName());
                    if (educationLevelWithSameName.isPresent() && !educationLevelWithSameName.get().getId().equals(id)) {
                        return ResponseEntity.status(HttpStatus.CONFLICT).build();
                    }
                    
                    existingEducationLevel.setName(educationLevel.getName());
                    existingEducationLevel.setDescription(educationLevel.getDescription());
                    existingEducationLevel.setUpdatedAt(LocalDateTime.now());
                    return ResponseEntity.ok(educationLevelRepository.save(existingEducationLevel));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/education-levels/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteEducationLevel(@PathVariable Long id) {
        if (!educationLevelRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        educationLevelRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }

    // Similar endpoints for Marital Status, Residence Type, Ethnic Group, Document Type

    // Departments
    @GetMapping("/departments")
    public ResponseEntity<List<Department>> getAllDepartments() {
        return ResponseEntity.ok(departmentRepository.findAll());
    }

    @GetMapping("/departments/{id}")
    public ResponseEntity<Department> getDepartmentById(@PathVariable Long id) {
        return departmentRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/departments")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Department> createDepartment(@RequestBody Department department) {
        if (departmentRepository.findByName(department.getName()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        department.setCreatedAt(LocalDateTime.now());
        department.setUpdatedAt(LocalDateTime.now());
        return ResponseEntity.status(HttpStatus.CREATED).body(departmentRepository.save(department));
    }

    @PutMapping("/departments/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Department> updateDepartment(@PathVariable Long id, @RequestBody Department department) {
        return departmentRepository.findById(id)
                .map(existingDepartment -> {
                    Optional<Department> departmentWithSameName = departmentRepository.findByName(department.getName());
                    if (departmentWithSameName.isPresent() && !departmentWithSameName.get().getId().equals(id)) {
                        return ResponseEntity.status(HttpStatus.CONFLICT).build();
                    }
                    
                    existingDepartment.setName(department.getName());
                    existingDepartment.setDescription(department.getDescription());
                    existingDepartment.setActive(department.isActive());
                    existingDepartment.setUpdatedAt(LocalDateTime.now());
                    return ResponseEntity.ok(departmentRepository.save(existingDepartment));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/departments/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteDepartment(@PathVariable Long id) {
        if (!departmentRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        departmentRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }

    // Positions
    @GetMapping("/positions")
    public ResponseEntity<List<Position>> getAllPositions() {
        return ResponseEntity.ok(positionRepository.findAll());
    }

    @GetMapping("/positions/{id}")
    public ResponseEntity<Position> getPositionById(@PathVariable Long id) {
        return positionRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/positions")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Position> createPosition(@RequestBody Position position) {
        if (positionRepository.findByName(position.getName()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        position.setCreatedAt(LocalDateTime.now());
        position.setUpdatedAt(LocalDateTime.now());
        return ResponseEntity.status(HttpStatus.CREATED).body(positionRepository.save(position));
    }

    @PutMapping("/positions/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Position> updatePosition(@PathVariable Long id, @RequestBody Position position) {
        return positionRepository.findById(id)
                .map(existingPosition -> {
                    Optional<Position> positionWithSameName = positionRepository.findByName(position.getName());
                    if (positionWithSameName.isPresent() && !positionWithSameName.get().getId().equals(id)) {
                        return ResponseEntity.status(HttpStatus.CONFLICT).build();
                    }
                    
                    existingPosition.setName(position.getName());
                    existingPosition.setDescription(position.getDescription());
                    existingPosition.setDepartment(position.getDepartment());
                    existingPosition.setActive(position.isActive());
                    existingPosition.setUpdatedAt(LocalDateTime.now());
                    return ResponseEntity.ok(positionRepository.save(existingPosition));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/positions/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deletePosition(@PathVariable Long id) {
        if (!positionRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        positionRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }

    // IESS
    @GetMapping("/iess")
    public ResponseEntity<List<Iess>> getAllIess() {
        return ResponseEntity.ok(iessRepository.findAll());
    }

    @GetMapping("/iess/{id}")
    public ResponseEntity<Iess> getIessById(@PathVariable Long id) {
        return iessRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping("/iess")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Iess> createIess(@RequestBody Iess iess) {
        if (iessRepository.findByName(iess.getName()).isPresent()) {
            return ResponseEntity.status(HttpStatus.CONFLICT).build();
        }
        iess.setCreatedAt(LocalDateTime.now());
        iess.setUpdatedAt(LocalDateTime.now());
        return ResponseEntity.status(HttpStatus.CREATED).body(iessRepository.save(iess));
    }    @PutMapping("/iess/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Iess> updateIess(@PathVariable Long id, @RequestBody Iess iess) {
        return iessRepository.findById(id)
                .map(existingIess -> {
                    Optional<Iess> iessWithSameName = iessRepository.findByName(iess.getName());
                    if (iessWithSameName.isPresent() && !iessWithSameName.get().getId().equals(id)) {
                        return ResponseEntity.status(HttpStatus.CONFLICT).<Iess>build();
                    }
                    
                    existingIess.setName(iess.getName());
                    existingIess.setDescription(iess.getDescription());
                    existingIess.setUpdatedAt(LocalDateTime.now());
                    return ResponseEntity.ok(iessRepository.save(existingIess));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/iess/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Void> deleteIess(@PathVariable Long id) {
        if (!iessRepository.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        iessRepository.deleteById(id);
        return ResponseEntity.noContent().build();
    }
}
