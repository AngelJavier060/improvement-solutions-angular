package com.improvementsolutions.config;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.Arrays;
import java.util.Collections;

/**
 * Configuración centralizada de CORS para la aplicación.
 * Esta es la única fuente de verdad para la configuración CORS.
 * Cualquier otra configuración CORS en la aplicación debe ser eliminada
 * para evitar conflictos.
 */

@Configuration
public class WebConfig {

    private static final Logger logger = LoggerFactory.getLogger(WebConfig.class);

    /**
     * Configuración principal de CORS para toda la aplicación.
     * Esta es la única fuente de verdad para la configuración CORS.
     * 
     * @return CorsConfigurationSource configurado con los parámetros necesarios
     */
    @Bean
    @Primary
    public CorsConfigurationSource corsConfigurationSource() {
        logger.info("Inicializando configuración CORS centralizada");
        
        CorsConfiguration configuration = new CorsConfiguration();        // Configurar origen permitido (frontend Angular)
        configuration.addAllowedOrigin("http://localhost:4200");
        
        // Configuración alternativa con patrones si es necesario
        // configuration.setAllowedOriginPatterns(Collections.singletonList("http://localhost:*"));
        
        // Configurar métodos HTTP permitidos
        configuration.setAllowedMethods(Arrays.asList(
            "GET", "POST", "PUT", "DELETE", "OPTIONS", "HEAD", "PATCH"
        ));
        
        // Configurar cabeceras permitidas
        configuration.setAllowedHeaders(Arrays.asList(
            "Authorization",
            "Content-Type",
            "X-Requested-With",
            "Accept",
            "Origin",
            "Access-Control-Request-Method",
            "Access-Control-Request-Headers",
            "enctype"
        ));
        
        // Configurar cabeceras expuestas al cliente
        configuration.setExposedHeaders(Arrays.asList(
            "Authorization",
            "Content-Disposition",
            "Content-Length"
        ));
        
        // Permitir credenciales (necesario para autenticación)
        configuration.setAllowCredentials(true);
        
        // Establecer tiempo de caché para respuestas preflight (1 hora)
        configuration.setMaxAge(3600L);

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);
        return source;
    }
}
